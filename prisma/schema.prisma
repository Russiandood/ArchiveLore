// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  // NextAuth basics
  name            String?
  email           String?  @unique
  image           String?

  // Twitch identity
  twitchId        String?  @unique  // <â€” critical for OSG
  displayName     String?

  // Check-in & pity
  lastCheckInDate DateTime?
  streakCount     Int       @default(0)
  relicPityStep   Int       @default(0)  // 0..100 mirrored curve

  // Optional simple inventory for materials
  materials       MaterialInventory?

  accounts        Account[]
  sessions        Session[]
  checkIns        CheckIn[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model MaterialInventory {
  id            String  @id @default(cuid())
  userId        String  @unique
  user          User    @relation(fields: [userId], references: [id])

  mundaneDust   Int     @default(0)
  curiousOre    Int     @default(0)
  artifactIngot Int     @default(0)
  relicCore     Int     @default(0)
  // sacred/divine excluded from daily check-in drops by design
}

model CheckIn {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  at        DateTime @default(now())
  // snapshot of what was awarded
  awardJson Json
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}